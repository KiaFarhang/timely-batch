plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'com.diffplug.gradle.spotless' version '3.27.1'
	id 'java'
	id 'jacoco'
	id 'org.jetbrains.kotlin.jvm' version '1.4.10'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.4.10'
}

group = 'com.kiafarhang.timely'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '1.9'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson:jackson-base:2.10.2.20200130'

	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	implementation "org.jetbrains.kotlin:kotlin-reflect"
	implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.+"

	implementation 'org.apache.commons:commons-lang3:3.9'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.mockito:mockito-core:3.3.0'


}

test {
	useJUnitPlatform()
}

spotless {
  java {
    googleJavaFormat()
  }
}

test {
    finalizedBy jacocoTestReport
}

def jacocoIgnore = [
	'**/models/**',
	'**/configuration/**',
	'**/listeners/**',
	'**/TimelyBatchApplication.class'
]

jacocoTestReport {
    dependsOn test
	afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoIgnore)
        }))
    }
}

jacocoTestCoverageVerification {
	afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoIgnore)
        }))
    }
	violationRules {
		rule {
			limit {
				minimum = 0.7
			}
		}
	}
}

build.dependsOn spotlessApply
build.dependsOn jacocoTestCoverageVerification
compileJava.dependsOn compileKotlin
compileKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}